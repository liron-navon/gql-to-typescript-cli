import {convertFiles, convert} from 'gql-to-typescript';
import * as path from 'path';
import * as randomUUID from 'uuid/v4';
import gql from 'graphql-tag';
import * as fs from 'fs';

// a sample of gql tag usage
const inputSample = gql`
    type Query {
        " get my type and have fun "
        getMyType(testString: String!): MyType
    }

    type MyType {
        test: String!
    }
`;

// what we are actually going to get
const outputSample = `
/*
*****************************************************
* This file was auto generated by gql-to-typescript *
*                  Type everything!                 *
*****************************************************
*/
export namespace TestNameSpace {
	export interface Query {
	/*  get my type and have fun  */
		getMyType?: (testString: string) => MyType;
	}
	export interface MyType {
		test: string;
	}
}
`;

test('Detects this test file and generates a new file in temp.', () => {
    const tempFilePath = path.join(__dirname, `../temp/${Date.now()}=${randomUUID()}-types.ts`);

    return convertFiles(__filename, {
        outputFile: tempFilePath,
        namespace: 'TestNameSpace'
    })
        .then(() => {
            expect('hello').toEqual('hello');
        });
});

