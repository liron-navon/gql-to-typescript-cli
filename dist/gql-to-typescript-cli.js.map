{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.ts","webpack:///external \"gql-to-typescript\"","webpack:///./src/consoleUtils.ts","webpack:///external \"fs\"","webpack:///external \"commander\"","webpack:///external \"path\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","gql_to_typescript_1","consoleUtils_1","fs","program","path","pkg","defaultConfig","glob","scalars","ignoreFields","ignoreTypes","namespace","outputFile","version","description","command","option","action","cmd","filePath","join","output","content","JSON","stringify","writeFileSync","console","info","consoleFlags","underscore","cmdCopy","__assign","config","configContent","readFileSync","parsedConfig","parse","assign","e","emphasis","parent","_name","options","convertFiles","error","reset","process","argv","require","warning"],"mappings":"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","file":"gql-to-typescript-cli.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {convertFiles} from 'gql-to-typescript';\nimport {consoleFlags} from './consoleUtils';\nimport * as fs from 'fs';\nimport * as program from 'commander';\nimport * as path from 'path';\n\nconst pkg = require('../package.json');\n\nconst defaultConfigFile = '.gql-to-typescript.config.json';\nconst defaultConfig = {\n    'glob': './**/*.ts',\n    'scalars': {},\n    'ignoreFields': [\n        '_empty'\n    ],\n    'ignoreTypes': [],\n    'namespace': 'GQLTypes',\n    'outputFile': './GQLTypes.ts'\n};\n\nprogram\n    .version(pkg.version)\n    .description(pkg.description);\n\nprogram\n    .command('init')\n    .description('initiates a config file')\n    .option('-o, --output [value]', 'where to put the config file', `${defaultConfigFile}`)\n    .action((cmd) => {\n        const filePath = path.join(cmd.output);\n        // write data to the file\n        const content = JSON.stringify(defaultConfig, null, 2);\n        fs.writeFileSync(filePath, content);\n\n        console.info(\n            consoleFlags.info,\n            `Created a configuration file at:`,\n            consoleFlags.underscore,\n            filePath\n        );\n    });\n\nprogram\n    .command('convert')\n    .description('convert files with gql tags to typescript definition')\n    .option('-g, --glob [value]', 'a glob for selecting files')\n    .option('-c, --config [value]', 'a path to a config file', `${defaultConfigFile}`)\n    .option('-o, --outputFile [value]', 'the generated types will go here')\n    .option('-ns, --namespace [value]', 'a namespace for the types', 'GQLTypes')\n    .option('-s, --scalars [value]', 'scalar types, as a json string (object)', '{}')\n    .option('-it, --ignoreTypes [value]', 'types to ignore, as a json string (array)', '[\"_empty\"]')\n    .option('-if, --ignoreFields [value]', 'fields to ignore, as a json string (array)', '[]')\n    .action((cmd) => {\n        const cmdCopy = {...cmd};\n        const {config} = cmdCopy;\n\n        try {\n            const configContent = fs.readFileSync(config, 'utf8');\n            const parsedConfig = JSON.parse(configContent);\n            Object.assign(cmdCopy, parsedConfig);\n        } catch (e) {\n            console.info(\n                consoleFlags.info,\n                `No config file was found, you can create one by running:`,\n                consoleFlags.emphasis,\n                `${cmd.parent._name} init`\n            );\n        }\n\n        if (!cmdCopy.glob || !cmdCopy.outputFile) {\n            console.error(\n                consoleFlags.error,\n                'You must specify at least a',\n                consoleFlags.underscore,\n                'glob',\n                consoleFlags.reset,\n                consoleFlags.error,\n                'and an',\n                consoleFlags.underscore,\n                'outputFile'\n            );\n            return;\n        }\n\n        const {glob, outputFile, namespace, scalars, ignoreTypes, ignoreFields} = cmdCopy;\n\n        const options: any = {\n            outputFile\n        };\n        if (namespace) {\n            options.namespace = namespace;\n        }\n        if (ignoreTypes) {\n            options.ignoreTypes = typeof ignoreTypes === 'string' ? JSON.parse(ignoreTypes) : ignoreTypes;\n        }\n        if (ignoreFields) {\n            options.ignoreFields = typeof ignoreFields === 'string' ? JSON.parse(ignoreFields) : ignoreFields;\n        }\n        if (scalars) {\n            options.scalars = typeof scalars === 'string' ? JSON.parse(scalars) : scalars;\n        }\n\n        // it will log a message after the conversion\n        convertFiles(glob, options);\n    });\n\nprogram.parse(process.argv);\n","module.exports = require(\"gql-to-typescript\");","export const consoleFlags = {\n    error: '\\x1b[31m', // adds red color to terminal output\n    warning: '\\x1b[33m', // adds yellow color to terminal output\n    info: '\\x1b[36m', // adds cyan color to terminal output\n    emphasis: '\\x1b[32m', // adds green color to terminal output\n    underscore: '\\x1b[4m', // adds underscore to terminal output\n    reset: '\\x1b[0m' // reset terminal output\n};\n","module.exports = require(\"fs\");","module.exports = require(\"commander\");","module.exports = require(\"path\");"],"sourceRoot":""}